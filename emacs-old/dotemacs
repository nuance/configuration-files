;; -*- mode:emacs-lisp -*-
;;-----------------------------------------------------------------------------
;; Global keyBindings
;;-----------------------------------------------------------------------------
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)

(global-set-key [f1] 'find-tag)
(global-set-key [f2] 'pop-tag-mark)
(global-set-key [f3] 'show-subtree)
(global-set-key [(shift f3)] 'show-all)
(global-set-key [f4] 'hide-subtree)
(global-set-key [(shift f4)] 'hide-sublevels)
(global-set-key [f5] 'flymake-goto-prev-error)
(global-set-key [f6] 'flymake-goto-next-error)
(global-set-key [f7] 'flymake-start-syntax-check)
(global-set-key [f12] 'open-diary)
(global-set-key [C-f12] 'save-diary)

;; Go to binding
(global-set-key "\M-g" 'goto-line)

;; Smarter centering
(global-set-key [(control l)]  'centerer)

;; Default to regexp search
(global-set-key [(control s)] 'isearch-forward-regexp)
(global-set-key [(control r)] 'isearch-backward-regexp)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(erc-track-exclude-server-buffer t)
 '(erc-track-minor-mode t)
 '(erc-track-mode t)
 '(erc-track-showcount t)
 '(gnus-cache-enter-articles (quote (ticked dormant unread read)))
 '(gnus-cache-remove-articles nil)
 '(gnus-cacheable-groups nil)
 '(gnus-fetch-old-headers t)
 '(gnus-use-cache t)
 '(jabber-vcard-avatars-retrieve nil)
 '(org-agenda-custom-commands (quote (("y" "iPhone and API Tickets" tags "iphone|api" nil))))
 '(org-agenda-files (quote ("~/.diary" "~/.tickets" "~/dev/active-project/nlp-python/TODO")))
 '(py-indent-offset 4)
 '(py-smart-indentation nil)
 '(speedbar-default-position (quote left))
 '(tab-width 4)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify)))

;;-----------------------------------------------------------------------------
;; Load Path
;;-----------------------------------------------------------------------------

;;load path set to folder ~/emacs for .el files
(setq load-path (cons "~/emacs" load-path))

(require 'byte-code-cache)

;;-----------------------------------------------------------------------------
;; Global Defaults
;;-----------------------------------------------------------------------------

;; bell gets really annoying
(setq visible-bell t)
(setq ring-bell-function (lambda ()))   ;get rid of bell completely

;; Some better defaults
(fset 'yes-or-no-p 'y-or-n-p)           ;replace y-e-s by y
(setq inhibit-startup-message t)        ;no splash screen
(setq ls-lisp-dirs-first t)             ;display dirs first in dired
(setq x-select-enable-clipboard t)      ;use system clipboard
(show-paren-mode 1)                     ;match parenthesis
(menu-bar-mode -1)                      ;hide menu-bar
(scroll-bar-mode -1)                    ;hide scroll-bar
(tool-bar-mode -1)                      ;hide tool-bar
(column-number-mode 1)                  ;show column number
(global-font-lock-mode 1)               ;Color syntax highlighting
(icomplete-mode 1)
(auto-compression-mode 1) ; Use compressed files as if they were normal
(setq font-lock-maximum-decoration t)      ;why not?
(add-hook 'text-mode-hook 'auto-fill-mode) ;auto-fill
(setq transient-mark-mode t)               ;highlights selections
(setq comment-style 'plain)
(setq frame-title-format (list '("emacs ") '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

(require 'printing)
(require 'cool-stuff)

(defun open-diary ()
  (interactive)
  (find-file "~/.diary")
  (goto-line 2)
  (move-end-of-line nil)
  (newline)
  (time-stamp)
  (newline))

(defun save-diary ()
  (interactive)
  (cd "~/diary")
  (shell-command (format "/usr/local/bin/git commit -am\"%s\"" (format-time-string "%c" (current-time)))))

(defvar my-diary-mode-keymap nil
  "Keymap for my diary minor mode.")

(if my-diary-mode-keymap
    nil
  (progn
    (setq my-diary-mode-keymap (make-sparse-keymap))
	(define-key my-diary-mode-keymap (kbd "C-c n") 'open-diary)))

(define-minor-mode my-diary-mode
  "diary niceties"
  :global t
  :lighter " Diary"
  :keymap my-diary-mode-keymap)

(defun time-stamp ()
  "Insert a time stamp."
  (insert
   (concat "* [" (format-time-string "%c" (current-time)) "] ")))

;;-----------------------------------------------------------------------------
;; Host Name (for conditional module loading / path settings)
;;-----------------------------------------------------------------------------

;; Split the system-name up into host and domain name.
(defvar host-name nil)
(defvar domain-name nil)
(let ((system-name (system-name)))
  (if (string-match "^\\([^.]+\\)\\.\\(.*\\)" system-name)
      ;; fully qualified system-name
      (setq host-name (match-string 1 system-name)
            domain-name (match-string 2 system-name))
    ;; system-name is host-name
    (setq host-name system-name
          domain-name (getenv "DOMAINNAME"))))

;;-----------------------------------------------------------------------------
;; SQL customizations
;;-----------------------------------------------------------------------------

;;(eval-after-load "sql"
;;      (load-library "sql-indent"))

;;-----------------------------------------------------------------------------
;; Jabber (for google talk)
;;-----------------------------------------------------------------------------

;; adjust this path:
(add-to-list 'load-path "~/emacs/jabber")
;; For 0.7.90 and above:
(require 'jabber-autoloads)
(setq jabber-account-list
	  '(("matt.h.jones@gmail.com"
		 (:network-server . "talk.google.com")
		 (:port . 443)
		 (:connection-type . ssl))
		("mattj@yelp.com"
		 (:network-server . "talk.google.com")
		 (:port . 443)
		 (:connection-type . ssl))))

;;-----------------------------------------------------------------------------
;; Gnus gmail
;;-----------------------------------------------------------------------------

(require 'nnir)

;;-----------------------------------------------------------------------------
;; Smarter Tab Behavior
;;-----------------------------------------------------------------------------

(defun indent-or-expand (arg)
  "Either indent according to mode, or expand the word preceding
point."
  (interactive "*P")
  (if (and
       (or (bobp) (= ?w (char-syntax (char-before))))
       (or (eobp) (not (= ?w (char-syntax (char-after))))))
      (dabbrev-expand arg)
    (indent-according-to-mode)))

(defun my-tab-fix ()
  (local-set-key "\t" 'indent-or-expand))

(defun indent-tab-or-expand (arg)
  "Either indent according to mode, or expand the word preceding
point."
  (interactive "*P")
  (if (and
       (or (bobp) (= ?w (char-syntax (char-before))))
       (or (eobp) (not (= ?w (char-syntax (char-after))))))
      (dabbrev-expand arg)
    (tab-to-tab-stop)))

(defun my-java-tab-fix ()
  (local-set-key "\t" 'indent-tab-or-expand))


(add-hook 'c-mode-hook          'my-tab-fix)
(add-hook 'sh-mode-hook         'my-tab-fix)
(add-hook 'emacs-lisp-mode-hook 'my-tab-fix)
(add-hook 'python-mode-hook     'my-tab-fix)
(add-hook 'java-mode-hook       'my-java-tab-fix)
(add-hook 'objc-mode-hook       'my-tab-fix)

(defun hl-warn-keywords ()
  (font-lock-add-keywords nil
                          '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t))))


(add-hook 'c-mode-common-hook 'hl-warn-keywords)
(add-hook 'python-mode-hook 'hl-warn-keywords)

;;-----------------------------------------------------------------------------
;; Major modes
;;-----------------------------------------------------------------------------

;;-----------------------------------------------------------------------------
;; MMM modes (allows a buffer to use multiple major modes)
;;-----------------------------------------------------------------------------

(setq load-path (cons "~/emacs/mmm-mode" load-path))
(require 'mmm-auto)
(setq mmm-global-mode 'maybe)
(setq mmm-submode-decoration-level 0)

;;-----------------------------------------------------------------------------
;; Tramp mode
;;-----------------------------------------------------------------------------

(require 'tramp)
(setq tramp-default-method "sshx")
(setq tramp-default-user "mattj")
(setq tramp-default-host "dev01")

;; mhjones
;;(add-to-list 'tramp-default-user-alist
;;             '("ssh2" "mhjones\\.org'" "matt"))


;;-----------------------------------------------------------------------------
;; ESS mode
;;-----------------------------------------------------------------------------

(add-to-list 'load-path "~/emacs/ess/lisp")
(require 'ess-site)

;;-----------------------------------------------------------------------------
;; Python mode
;;-----------------------------------------------------------------------------

(load-library "python")

(add-hook 'python-mode-hook '(lambda () (define-key python-mode-map "\C-m" 'newline-and-indent)))

(add-hook 'python-mode-hook '(lambda () (custom-set-variables
                                         '(py-indent-offset 4)
                                         '(tab-width 4)
                                         '(py-smart-indentation nil))))

(defun python-auto-fill-comments-only ()
  (auto-fill-mode 1)
  (set (make-local-variable 'fill-nobreak-predicate)
       (lambda ()
         (not (python-in-string/comment)))))

(add-hook 'python-mode-hook
          (lambda ()
            (python-auto-fill-comments-only)))

;;(add-hook 'python-mode-hook
;;		  '(lambda () 
;;			 (eldoc-mode 1)
;;			 (set (make-local-variable 'eldoc-documentation-function)
;;				  'py-eldoc-function) t)

(defun py-eldoc-function (&optional word)
  "Launch PyDOC on the Word at Point"
  (interactive)
  (let* ((word (if word word (thing-at-point 'symbol)))
		 (docs (shell-command-to-string (concat "/usr/bin/python" " -c \"from pydoc import help;help(\'" word "\')\"")))
		 (split-docs (split-string docs "|  ")))
	(if (> (length split-docs) 1) (car (split-string (cadr split-docs) "\n")) nil)))

;; Outline mode
;; setup python mode
                                        ; add my customization
(add-hook 'python-mode-hook 'my-python-hook)
                                        ; this gets called by outline to deteremine the level. Just use the length of the whitespace
(defun py-outline-level ()
  (let (buffer-invisibility-spec)
    (save-excursion
      (skip-chars-forward "\t ")
      (current-column))))
                                        ; this get called after python mode is enabled
(defun my-python-hook ()
                                        ; outline uses this regexp to find headers. I match lines with indented "class"
                                        ; and "def" lines and lines with @ (attribute)
  (setq outline-regexp "[ \t]*\\(def\\|class\\)\\|[\t]*\\@[A-Za-z]+\\|[A-Za-z]+")
                                        ; enable our level computation
  (setq outline-level 'py-outline-level)
                                        ; turn on outline mode
  (outline-minor-mode t)
                                        ; initially hide all but the headers
  (hide-body)
                                        ; make paren matches visible
  (show-paren-mode 1)
                                        ; higlight current line
  ;;  (highline-mode)
  )

(add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))

(define-derived-mode cython-mode python-mode "Cython"
  (make-face 'cython-variable-face)
  (font-lock-add-keywords
   nil
   '(
     ("\\<\\(NULL\\|c\\(def\\|har\\|typedef\\)\\|double\\|e\\(num\\|xtern\\)\\|float\\|in\\(clude|t\\)\\|object\\|public\\|readonly\\|struct\\|type\\|union\\|void\\)\\>" 1 font-lock-builtin-face)
     )
   )
  (font-lock-mode 1)
  (setq outline-regexp "[ \t]*\\(def\\|class\\|cdef\\)[^:]*:\\|[ \t]*\\@")
  (setq outline-level 'py-outline-level)
  (outline-minor-mode t)
  (hide-body)
  )

;;-----------------------------------------------------------------------------
;; Scala mode
;;-----------------------------------------------------------------------------

(add-to-list 'load-path "~/emacs/scala-mode")
(require 'scala-mode-auto)

;;-----------------------------------------------------------------------------
;; Thrift mode
;;-----------------------------------------------------------------------------

;;(require 'thrift-mode)

;;-----------------------------------------------------------------------------
;; Objective-C mode
;;-----------------------------------------------------------------------------
(defun objc-outline-level ()
  0)

(add-hook 'objc-mode-hook
          (lambda ()
            (pair-mode)
            (setq outline-regexp "[ \t]*\\(@interface\\|@implementation\\)\\|[ \t]*\\(\\-\\|\\+\\)[ \t]*([^\)]*)")
            (setq outline-level 'objc-outline-level)
            (outline-minor-mode t)
            (hide-body)
            (show-paren-mode 1)
            (local-set-key [(return)] 'newline-and-indent)))

;;-----------------------------------------------------------------------------
;; Java mode
;;-----------------------------------------------------------------------------
(add-hook 'java-mode-hook
          (lambda ()
            (local-set-key [(return)] 'newline-and-indent)
            (custom-set-variables '(tab-width 4))
			(flymake-mode 0)))

;;-----------------------------------------------------------------------------
;; Erlang mode
;;-----------------------------------------------------------------------------

;;(when (string-equal host-name "nuance")
;;  (setq load-path (cons  "/sw/lib/erlang/lib/tools-2.6/emacs" load-path))
;;  (setq erlang-root-dir "/sw/")
;;  (setq exec-path (cons "/sw/bin" exec-path))
;;  (require 'erlang-start))

;;-----------------------------------------------------------------------------
;; Lua mode
;;-----------------------------------------------------------------------------

(require 'lua-mode)

(defun flymake-lua-init ()
  "Invoke luac with '-p' to get syntax checking"
  (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
         (local-file  (file-relative-name
                       temp-file
                       (file-name-directory buffer-file-name))))
    (list "luac" (list "-p" local-file))))

(when (load "flymake" t)
  (add-to-list 'flymake-allowed-file-name-masks '("\\.lua\\'" flymake-lua-init))
  (add-to-list 'flymake-err-line-patterns '("^.*luac[0-9.]*\\(.exe\\)?: *\\(.*\\):\\([0-9]+\\): \\(.*\\)$" 2 3 nil 4)))

(add-hook 'lua-mode-hook
          '(lambda ()
             "Don't want flymake mode for lua regions in rhtml
          files and also on read only files"
             (if (and (not (null buffer-file-name)) (file-writable-p buffer-file-name))
                 (flymake-mode))))

;;-----------------------------------------------------------------------------
;; Haskell mode
;;-----------------------------------------------------------------------------

(load "~/emacs/haskell-mode/haskell-site-file")
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
(add-hook 'haskell-mode-hook 'font-lock-mode)

(add-to-list 'auto-mode-alist '("\\.hs$" . haskell-mode))

;;-----------------------------------------------------------------------------
;; ido - Better minibuffer completion
;;-----------------------------------------------------------------------------
(if (< emacs-major-version 22) ;newer version included in Emacs 22, that doesn't work with 21
    (load-library "ido-old")
  (require 'ido))
(ido-mode t)

(add-hook 'ido-define-mode-map-hook 'ido-my-keys)
(defun ido-my-keys ()
  (define-key 'ido-mode-map "\t" 'ido-complete)
  (define-key 'ido-mode-map "\C-t" 'ido-toggle-regexp) ; same as in isearch
  (define-key 'ido-mode-map "\C-d" 'ido-enter-dired))  ; cool

;; Completion for all commands (eg M-x completion)

(setq ido-execute-command-cache nil)
(defun ido-execute-command ()
  (interactive)
  (call-interactively
   (intern
    (ido-completing-read
     "M-x "
     (progn
       (unless ido-execute-command-cache
         (mapatoms (lambda (s)
                     (when (commandp s)
                       (setq ido-execute-command-cache
                             (cons (format "%S" s) ido-execute-command-cache))))))
       ido-execute-command-cache)))))

(add-hook 'ido-setup-hook
          (lambda ()
            (setq ido-enable-flex-matching t)
            (global-set-key "\M-x" 'ido-execute-command)))

(defun ido-find-file-in-tag-files ()
  (interactive)
  (save-excursion
    (let ((enable-recursive-minibuffers t))
      (visit-tags-table-buffer))
    (ido-completing-read "Project file: "
                         (tags-table-files)
                         nil t)))

;;(global-set-key "\C-x\C-f" 'ido-find-file-in-tag-files)

;;-----------------------------------------------------------------------------
;; Remember mode
;;-----------------------------------------------------------------------------

(setq load-path (cons "~/emacs/remember" load-path))
(require 'remember-autoloads)
(setq remember-data-file "~/notes.txt")
(global-set-key (kbd "C-c r") 'remember)

(defun wicked/remember-review-file ()
  "Open `remember-data-file'."
  (interactive)
  (find-file-other-window remember-data-file))

(defun wicked/remember-line-numbers-and-file-names ()
  "Return FILENAME line NUMBER."
  (save-restriction
    (widen)
    (format " %s line %d"
            (or (buffer-file-name) (buffer-name))
            (line-number-at-pos))))

(eval-after-load 'remember
  '(progn
     (add-to-list 'remember-annotation-functions
                  'wicked/remember-line-numbers-and-file-names)))

(global-set-key (kbd "C-c R") 'wicked/remember-review-file)

;;-----------------------------------------------------------------------------
;; Org mode
;;-----------------------------------------------------------------------------

(setq load-path (cons "~/emacs/org/" load-path))
(require 'org-install)

(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

(define-key mode-specific-map [?a] 'org-agenda)

(add-hook 'org-mode-hook
          '(lambda ()
             (define-key org-mode-map (kbd "C-c C-l") 'my-org-insert-link)))

(setq org-paper-directory "~/org-papers/")

(setq org-export-with-LaTeX-fragments t)

(defun paper-get-buffer ()
  (let (time-now buffer)
    (setq time-now (current-time))
    (get-buffer-create (format "*%s<%s-%s-%s>*"
                               "papers"
                               (nth 0 time-now) (nth 1 time-now) (nth 2 time-now)))))

(defun download-paper (url)
  "Download a paper url in the background when referenced from an
  org-mode link, returning the new (local) url"
  (interactive)
  ;; Check for the directory
  (unless (file-exists-p org-paper-directory)
    (make-directory org-paper-directory)
    (message "Created directory %s for downloaded papers." org-paper-directory))
  ;; Download.
  (let* ((url-request-method "GET")
         (url-request-extra-headers nil)
         (url-mime-accept-string "*/*")
         (parsed-url (url-generic-parse-url url))
         (download-buffer (paper-get-buffer))
         (download-buffer-name (buffer-name download-buffer))
         (paper-url url)
         (file-path (concat org-paper-directory (file-name-nondirectory paper-url))))
    (with-current-buffer (get-buffer download-buffer-name)
      ;; Bind download buffer with local buffer.
      (setq download-buffer
            (url-retrieve-synchronously parsed-url))
      ;; Now save the buffer in the papers directory
      ;; Save file.
      (with-current-buffer download-buffer
        (if (or (not (file-exists-p file-path))
                (yes-or-no-p (format "Do you want replace file: '%s' ?" file-path)))
            (progn
              (write-file file-path)))))
    ;; return the file name
    (concat "file:" (file-truename file-path))))

(defun downloadable-pdf (url)
  (if (and url
           (or (string-equal (file-name-extension url) "pdf")
               (string-equal (file-name-extension url) "ps")
               (string-equal (file-name-extension url) "eps"))
           (or (string-equal (car (split-string url ":")) "http")
               (string-equal (car (split-string url ":")) "https")))
      t
    nil))

(defun my-org-insert-link (&optional COMPLETE-FILE LINK-LOCATION)
  ;;(before org-insert-link (&optional COMPLETE-FILE LINK-LOCATION))
  "Rewrite remote pdf references to local files, prompting for the
link location as usual then calling the insert link function with a
link to the fetched pdf"
  (interactive)
  (let ((url (if LINK-LOCATION LINK-LOCATION (read-from-minibuffer
                                              "Link: "))))
    (if (downloadable-pdf url)
        (org-insert-link COMPLETE-FILE (download-paper url))
      (org-insert-link COMPLETE-FILE url))))

;;-----------------------------------------------------------------------------
;; Minor modes
;;-----------------------------------------------------------------------------

;; Yelp customizations
(require 'yelp)

;; Electric pairs
(require 'pair-mode)

;; Cheat
(require 'cheat)

;; Line numbering - M-x linum
(require 'linum)

;; Line highlighting
(require 'highline)

;; Textmate mode
(require 'textmate)
(global-set-key "\C-q" 'textmate-goto-file)

;;-----------------------------------------------------------------------------
;; Indent whole buffer
;;-----------------------------------------------------------------------------

(defun indent-whole-buffer ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))

;;-----------------------------------------------------------------------------
;; Color theme
;;-----------------------------------------------------------------------------

(setq load-path (append load-path  (list "~/emacs/color-theme/themes" "~/emacs/color-theme")))
(require 'color-theme)
;;(load-library "color-theme-cl-frame")
;;(load-library "color-theme-colorful-obsolescence")
;;(load-library "color-theme-library")
(color-theme-initialize)
(load-library "color-theme-twilight")

(defun load-dark-settings ()
  (interactive)
  (color-theme-twilight)
  ;;  (highline-mode)
  )

(defun load-light-settings ()
  (interactive)
  (color-theme-calm-forest)
  ;;  (highline-mode)
  )

(color-theme-twilight)

;;-----------------------------------------------------------------------------
;; Smarter Centering
;;-----------------------------------------------------------------------------

;; Centering code stolen from somewhere and restolen from
;; http://www.chrislott.org/geek/emacs/dotemacs.html
;; centers the screen around a line...

(defun centerer ()
  "Repositions current line: once middle, twice top, thrice bottom"
  (interactive)
  (cond ((eq last-command 'centerer2)   ; 3 times pressed = bottom
         (recenter -1))
        ((eq last-command 'centerer1)   ; 2 times pressed = top
         (recenter 0)
         (setq this-command 'centerer2))
        (t                              ; 1 time pressed = middle
         (recenter)
         (setq this-command 'centerer1))))


;;-----------------------------------------------------------------------------
;; Flymake - error checking as you type
;;-----------------------------------------------------------------------------

;; pyflakes... thanks again to chrism.

(when (load "flymake" t)
  (defun flymake-pyflakes-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
           (local-file (file-relative-name
                        temp-file
                        (file-name-directory buffer-file-name))))
      (list "pyflakes" (list local-file))))

  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pyflakes-init)))

(add-hook 'find-file-hook 'flymake-find-file-hook)

(load-library "flymake-cursor")

(defun pylint ()
  "Run pylint against the file behind the current buffer after
checking if unsaved buffers should be saved."

  (interactive)
  (let* ((file (buffer-file-name (current-buffer)))
         (command (concat "pylint --output-format=parseable \"" file "\"")))
    (save-some-buffers (not compilation-ask-about-save) nil) ; save files.
    (compilation-start command)))

;;(when (load "flymake" t)
(defun flymake-pylint-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
                     'flymake-create-temp-inplace))
         (local-file (file-relative-name
                      temp-file
                      (file-name-directory buffer-file-name))))
    (list "epylint" (list local-file))))


(defun strict-flymake-enable ()
  (interactive)
  (delete 'flymake-allowed-file-name-masks
          '("\\.py\\'" flymake-pyflakes-init))
  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pylint-init))
  (flymake-start-syntax-check))

(defun strict-flymake-disable ()
  (interactive)
  (delete 'flymake-allowed-file-name-masks
          '("\\.py\\'" flymake-pylint-init))
  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pyflakes-init))
  (flymake-start-syntax-check))

(defun next-flymake-error ()
  (interactive)
  (let ((err-buf nil))
    (condition-case err
        (setq err-buf (next-error-find-buffer))
      (error))
    (if err-buf
        (next-error)
      (progn
        (flymake-goto-next-error)
        (let ((err (get-char-property (point) 'help-echo)))
          (when err
            (message err)))))))

;;(add-hook 'find-file-hook 'flymake-find-file-hook)

;;-----------------------------------------------------------------------------
;; Mako mode (MMM derived mode)
;;-----------------------------------------------------------------------------

(require 'mmm-mako)
(add-to-list 'auto-mode-alist '("\\.mako\\'" . html-mode))
(mmm-add-mode-ext-class 'html-mode "\\.mako\\'" 'mako)

;;-----------------------------------------------------------------------------
;; Cheetah mode - mix of html-mode and a basic cheetah keyword highlighter
;;-----------------------------------------------------------------------------

(define-derived-mode cheetah-mode html-mode "Cheetah"
  (make-face 'cheetah-variable-face)
  (font-lock-add-keywords
   nil
   '(
     ;; #(symbol) lines
     ("\\(#\\(attr\\|def\\|block\\|from\\|else\\|else if\\|include\\|extends\\|implements\\|set\\|import\\|for\\|if\\|end\\|block\\)\\)\\>" 1 font-lock-type-face)
     ;; PSP-style
     ("\\(#\\(from\\|for\\|end\\)\\).*\\<\\(for\\|import\\|def\\|if\\|in\\)\\>" 3 font-lock-type-face)
     ;; One-line #if EXPR1 then EXPR2 else EXPR3(# or eol)
     ("#if[^$#]*then[^$#]*else[^$#]*\\(#\\|$\\)" 1 font-lock-builtin-face)
     ;; Comments
     ("\\(^##.*\\)\n" 1 font-lock-comment-face)
     ;; $var
     ("\\(\\$\\(?:\\sw\\|}\\|{\\|\\s_\\)+\\)" 1 font-lock-variable-name-face)
     ;; #set var
     ()
     ;; Methods
     ("^#.*\\(True\\|False\\|None\\)" 1 font-lock-builtin-face)))
  (font-lock-mode 1))

;;-----------------------------------------------------------------------------
;; Smart Cheetah (uses mmm for javascript, css)
;;-----------------------------------------------------------------------------

;; CSS-Mode
(autoload 'css-mode "css-mode")
(add-to-list 'auto-mode-alist '("\\.css\\'" . css-mode))
(setq cssm-indent-function #'cssm-c-style-indenter)
(setq cssm-indent-level '2)

;; javascript-generic-mode
(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(autoload 'javascript-mode "javascript" nil t)

;; Set up an mmm group for fancy html editing
(mmm-add-group
 'fancy-cheetah
 '(
   (html-cheetah-portion
    :submode cheetah-mode
    :face mmm-code-submode-face
    :front "#"
	:back "$")
   (html-css-embedded
    :submode css-mode
    :face mmm-declaration-submode-face
    :front "<style\[^>\]*>"
    :back "</style>")
   (html-css-attribute
    :submode css-mode
    :face mmm-declaration-submode-face
    :front "\\bstyle=\\s-*\""
    :back "\"")
   (html-script-embedded
    :submode javascript-mode
    :face mmm-code-submode-face
    :front "<script>"
    :back "</script>")
   (html-javascript-embedded
    :submode javascript-mode
    :face mmm-code-submode-face
    :front "<script type=\"text/javascript\">"
    :back "</script>")
   (html-javascript-attribute
    :submode javascript-mode
    :face mmm-code-submode-face
    :front "\\bon\\w+=\\s-*\""
    :back "\"")))

(add-to-list 'mmm-mode-ext-classes-alist '(html-mode nil fancy-cheetah))

(setq auto-mode-alist (cons '( "\\.tmpl\\'" . html-mode ) auto-mode-alist ))

(server-start)

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 100 :width normal :foundry "unknown" :family "Monaco"))))
 '(highline-face ((t (:background "gray15")))))
